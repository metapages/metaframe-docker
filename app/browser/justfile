###############################################################
# Minimal commands to develop, build, test, and deploy
###############################################################
# just docs: https://github.com/casey/just
set shell                          := ["bash", "-c"]
set dotenv-load                    := true
# Change this to anything else to NOT publish a seperate npm module
NPM_PUBLISH                        := "true"
# E.g. 'my.app.com'. Some services e.g. auth need know the external endpoint for example OAuth
# The root domain for this app, serving index.html
export APP_FQDN                    := env_var_or_default("APP_FQDN", "metaframe1.dev")
export APP_PORT                    := env_var_or_default("APP_PORT", "443")
ROOT                               := "/app"
#`if [ "${GITHUB_WORKSPACE}" != "" ]; then echo "${GITHUB_WORKSPACE}"; else echo "$(git rev-parse --show-toplevel)"; fi`
export CI                          := env_var_or_default("CI", "")
PACKAGE_NAME_SHORT                 := file_name(`cat package.json | jq -r '.name' | sd '.*/' ''`)
# Store the CI/dev docker image in github
# ghcr.io packages cannot have more than one "/" after the organization name
export DOCKER_IMAGE_PREFIX         := "ghcr.io/metapages/" + PACKAGE_NAME_SHORT
# Always assume our current cloud ops image is versioned to the exact same app images we deploy
export DOCKER_TAG                  := `if [ "${DOCKER_TAG}" != "" ]; then echo "${DOCKER_TAG}"; else if [ "${GITHUB_ACTIONS}" = "true" ]; then echo "${GITHUB_SHA}"; else echo "$(git rev-parse --short=8 HEAD)"; fi; fi`
export DOCKER_IMAGE_NAME           := `basename $(pwd)`
# The NPM_TOKEN is required for publishing to https://www.npmjs.com
NPM_TOKEN                          := env_var_or_default("NPM_TOKEN", "")
# Source of deno scripts. When developing we need to switch this
export DENO_SOURCE                 := env_var_or_default("DENO_SOURCE", "https://deno.land/x/metapages@v0.0.3")
# Common commands that require some preamble
vite                               := "VITE_APP_FQDN=" + APP_FQDN + " VITE_APP_PORT=" + APP_PORT + " NODE_OPTIONS='--max_old_space_size=16384' ./node_modules/vite/bin/vite.js"
tsc                                := "./node_modules/typescript/bin/tsc"
# minimal formatting, bold is very useful
bold                               := '\033[1m'
normal                             := '\033[0m'
green                              := "\\e[32m"
yellow                             := "\\e[33m"
blue                               := "\\e[34m"
magenta                            := "\\e[35m"
grey                               := "\\e[90m"

@foo:
    echo "test {{DOCKER_TAG}}"

# If not in docker, get inside
_help:
    #!/usr/bin/env bash
    # exit when any command fails
    set -euo pipefail
    if [ -f /.dockerenv ]; then
        echo -e ""
        just --list --unsorted --list-heading $'üå± Commands:\n\n'
        echo -e ""
        echo -e "    Github Pages  URL üîó {{green}}$(cat package.json | jq -r '.repository.url'){{normal}}"
        echo -e "    Develop URL üîó {{green}}https://{{APP_FQDN}}:{{APP_PORT}}/{{normal}}"
        echo -e ""
    else
        # Hoist into a docker container with all require CLI tools installed
        deno run --unstable --allow-all {{DENO_SOURCE}}/commands/docker/docker_mount.ts --mount-ssh=true --mount-git-config=true  --user=root --image={{DOCKER_IMAGE_PREFIX}}{{DOCKER_IMAGE_NAME}}:{{DOCKER_TAG}} --context="." --dockerfile=Dockerfile --command=bash;
    fi

# Run the dev server. Opens the web app in browser.
dev:
    #!/usr/bin/env bash
    set -euo pipefail
    # if [ -f /.dockerenv ]; then
    #     just _dev;
    # else
        just _mkcert;
        # open https://${APP_FQDN}:${APP_PORT};
        just _dev;
    # fi

_dev: _ensure_npm_modules _build_shared (_tsc "--build")
    #!/usr/bin/env bash
    set -eo pipefail

    if [ "${VITE_SERVER_ORIGIN}" = "" ]; then
        export VITE_SERVER_ORIGIN="https://${APP_FQDN}:${APP_PORT}"
    fi
    echo "Browser development pointing to: ${VITE_SERVER_ORIGIN}"
    MAYBE_OPEN_BROWSER=""
    if [ ! -f /.dockerenv ]; then
        export MAYBE_OPEN_BROWSER="--open";
    fi
    VITE_SERVER_ORIGIN=${VITE_SERVER_ORIGIN} {{vite}} --clearScreen false ${MAYBE_OPEN_BROWSER}

# APP_ORIGIN=https://${APP_FQDN}:${APP_PORT}

# Build the browser client static assets and npm module
build: (_tsc "--build") _browser_assets_build

# Test: currently bare minimum: only building. Need proper test harness.
@test: (_tsc "--build")

# Publish to npm and github pages.
publish npmversionargs="patch": _ensureGitPorcelain test _githubpages_publish
    @# Push the tags up
    git push origin v$(cat package.json | jq -r '.version')

# GitHub Pages commands: publish (more coming)
ghpages command="":
    #!/usr/bin/env bash
    set -euo pipefail

    if [ "{{command}}" = "publish" ];
    then
        just _githubpages_publish
    else
        echo ""
        echo "üëâ just ghpages [ publish ]"
        echo ""
    fi

# Deletes: .certs dist
clean:
    rm -rf .certs dist

# Rebuild the client on changes, but do not serve
watch BUILD_SUB_DIR="":
    watchexec -w src -w tsconfig.json -w package.json -w vite.config.ts -- just build

# Watch and serve browser client. Can't use vite to serve: https://github.com/vitejs/vite/issues/2754
serve BUILD_SUB_DIR="": (_browser_assets_build BUILD_SUB_DIR)
    cd docs && ../node_modules/http-server/bin/http-server --cors '*' -o {{BUILD_SUB_DIR}} -a {{APP_FQDN}} -p {{APP_PORT}} --ssl --cert ../.certs/{{APP_FQDN}}.pem --key ../.certs/{{APP_FQDN}}-key.pem

_build_shared:
    just ../shared/build

# build production brower assets
@_browser_assets_build BUILD_SUB_DIR="": _ensure_npm_modules
    mkdir -p docs/{{BUILD_SUB_DIR}}
    find docs/{{BUILD_SUB_DIR}} -maxdepth 1 -type f -exec rm "{}" \;
    rm -rf $(echo "docs/{{BUILD_SUB_DIR}}/assets" | sed s#//*#/#g)
    BUILD_SUB_DIR={{BUILD_SUB_DIR}} {{vite}} build --mode=production

# compile typescript src, may or may not emit artifacts
_tsc +args="": _ensure_npm_modules
    {{tsc}} {{args}}

# DEV: generate TLS certs for HTTPS over localhost https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/
_mkcert:
    just ../ingress/https/mkcert

@_ensure_npm_modules:
    if [ ! -f "{{tsc}}" ]; then npm i; fi

# vite builder commands
@_vite +args="":
    {{vite}} {{args}}

# update "gh-pages" branch with the (versioned and default) current build (./docs) (and keeping all previous versions)
_githubpages_publish: _ensureGitPorcelain
    #!/usr/bin/env bash
    set -euo pipefail

    # Mostly CURRENT_BRANCH should be main, but maybe you are testing on a different branch
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [ -z "$(git branch --list gh-pages)" ]; then
        git checkout -b gh-pages;
    fi

    git checkout gh-pages

    git rebase --strategy recursive --strategy-option theirs ${CURRENT_BRANCH}

    # Then build
    just _browser_assets_build ./v$(cat package.json | jq -r .version)
    just _browser_assets_build

    # Now commit and push
    git add --all --force docs
    git commit -m "site v$(cat package.json | jq -r .version)"
    git push -uf origin gh-pages

    # Return to the original branch
    git checkout ${CURRENT_BRANCH}
    echo -e "üëâ Github configuration (once): üîó https://github.com/$(git remote get-url origin | sd 'git@github.com:' '' | sd '.git' '')/settings/pages"
    echo -e "  - {{green}}Source{{normal}}"
    echo -e "    - {{green}}Branch{{normal}}: gh-pages üìÅ /docs"

####################################################################################
# Ensure docker image for local and CI operations
# Hoist into a docker container with all require CLI tools installed
####################################################################################
# Hoist into a docker container with all require CLI tools installed
# @_docker +args="bash": _build_docker
#     echo -e "üå± Entering docker context: {{bold}}{{DOCKER_IMAGE_PREFIX}}:{{DOCKER_TAG}} from <repo/>Dockerfile üö™üö™{{normal}}"
#     mkdir -p {{ROOT}}/.tmp
#     touch {{ROOT}}/.tmp/.bash_history
#     touch {{ROOT}}/.tmp/.aliases
#     if [ -f ~/.aliases ]; then cp ~/.aliases {{ROOT}}/.tmp/.aliases; fi
#     export WORKSPACE=/repo && \
#         docker run \
#             --platform linux/$(docker version -f '{{{{json .}}' | jq -r '.Server.Arch') \
#             --rm \
#             -ti \
#             -e DOCKER_IMAGE_PREFIX=${DOCKER_IMAGE_PREFIX} \
#             -e PS1="<$(basename $PWD)/> " \
#             -e PROMPT="<%/% > " \
#             -e DOCKER_IMAGE_PREFIX={{DOCKER_IMAGE_PREFIX}} \
#             -e HISTFILE=$WORKSPACE/.tmp/.bash_history \
#             -e WORKSPACE=$WORKSPACE \
#             -v {{ROOT}}:$WORKSPACE \
#             $(if [ -d $HOME/.gitconfig ]; then echo "-v $HOME/.gitconfig:/root/.gitconfig"; else echo ""; fi) \
#             $(if [ -d $HOME/.ssh ]; then echo "-v $HOME/.ssh:/root/.ssh"; else echo ""; fi) \
#             -p {{APP_PORT}}:{{APP_PORT}} \
#             --add-host {{APP_FQDN}}:127.0.0.1 \
#             -w $WORKSPACE \
#             {{DOCKER_IMAGE_PREFIX}}:{{DOCKER_TAG}} {{args}} || true

# # If the ./app docker image in not build, then build it
# _build_docker:
#     #!/usr/bin/env bash
#     set -euo pipefail

#     if [[ "$(docker images -q {{DOCKER_IMAGE_PREFIX}}:{{DOCKER_TAG}} 2> /dev/null)" == "" ]]; then
#         echo -e "üå±üå±  ‚û° {{bold}}Building docker image ...{{normal}} üö™üö™ ";
#         echo -e "üå± </> {{bold}}docker build --platform linux/$(docker version -f '{{{{json .}}' | jq -r '.Server.Arch') -t {{DOCKER_IMAGE_PREFIX}}:{{DOCKER_TAG}} . {{normal}}üö™ ";
#         docker build --platform linux/$(docker version -f '{{{{json .}}' | jq -r '.Server.Arch') -t {{DOCKER_IMAGE_PREFIX}}:{{DOCKER_TAG}} . ;
#     fi

# _ensure_inside_docker:
#     #!/usr/bin/env bash
#     set -euo pipefail
#     if [ ! -f /.dockerenv ]; then
#         echo -e "üåµüî•üåµüî•üåµüî•üåµ Not inside a docker container. First run the command: 'just' üåµüî•üåµüî•üåµüî•üåµ"
#         exit 1
#     fi

@_ensureGitPorcelain:
    if [ ! -z "$(git status --untracked-files=no --porcelain)" ]; then \
        echo -e " ‚ùó Uncommitted files:"; \
        git status --untracked-files=no --porcelain; \
        exit 1; \
    fi

@_require_NPM_TOKEN:
	if [ -z "{{NPM_TOKEN}}" ]; then echo "Missing NPM_TOKEN env var"; exit 1; fi
