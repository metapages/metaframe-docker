###############################################################
# Minimal commands to develop, build, test, and deploy
###############################################################
# just docs: https://github.com/casey/just
set shell                          := ["bash", "-c"]
set dotenv-load                    := true
# E.g. 'my.app.com'. Some services e.g. auth need know the external endpoint for example OAuth
# The root domain for this app, serving index.html
export APP_FQDN                    := env_var_or_default("APP_FQDN", "metaframe1.dev")
export APP_PORT                    := env_var_or_default("APP_PORT", "443")
export APP_PORT_BROWSER            := env_var_or_default("APP_PORT_BROWSER", "4440")
# Either this is set the docker-compose stack, or it defaults to production
# So if you want local development outside docker-compose, but pointing locally,
# you have to manually set this to 'local'
SERVER_ORIGIN                      := env_var_or_default("SERVER_ORIGIN", "https://docker-metapage-io.glitch.me")
export ROOT                        := env_var_or_default("GITHUB_WORKSPACE", `(which git >/dev/null && git rev-parse --show-toplevel) || (cd ../.. && pwd)`)
#`if [ "${GITHUB_WORKSPACE}" != "" ]; then echo "${GITHUB_WORKSPACE}"; else echo "$(git rev-parse --show-toplevel)"; fi`
export CI                          := env_var_or_default("CI", "")
PACKAGE_NAME_SHORT                 := file_name(`cat package.json | jq -r '.name' | sd '.*/' ''`)
DIST_ROOT                          := ROOT + "/docs"
# Store the CI/dev docker image in github
# ghcr.io packages cannot have more than one "/" after the organization name
export DOCKER_IMAGE_PREFIX         := "ghcr.io/metapages/" + PACKAGE_NAME_SHORT
# Always assume our current cloud ops image is versioned to the exact same app images we deploy
export DOCKER_TAG                  := `if [ "${DOCKER_TAG}" != "" ]; then echo "${DOCKER_TAG}"; else if [ "${GITHUB_ACTIONS}" = "true" ]; then echo "${GITHUB_SHA}"; else echo "$(git rev-parse --short=8 HEAD)"; fi; fi`
export DOCKER_IMAGE_NAME           := `basename $(pwd)`
# The NPM_TOKEN is required for publishing to https://www.npmjs.com
NPM_TOKEN                          := env_var_or_default("NPM_TOKEN", "")
# Source of deno scripts. When developing we need to switch this
DENO_SOURCE                        := env_var_or_default("DENO_SOURCE", "https://deno.land/x/metapages@v0.0.13")
# Common commands that require some preamble
vite                               := "VITE_APP_FQDN=" + APP_FQDN + " VITE_APP_PORT=" + APP_PORT + " NODE_OPTIONS='--max_old_space_size=16384' ./node_modules/vite/bin/vite.js"
tsc                                := "./node_modules/typescript/bin/tsc"
# minimal formatting, bold is very useful
bold                               := '\033[1m'
normal                             := '\033[0m'
green                              := "\\e[32m"
yellow                             := "\\e[33m"
blue                               := "\\e[34m"
magenta                            := "\\e[35m"
grey                               := "\\e[90m"

# If not in docker, get inside
_help:
    #!/usr/bin/env bash
    # exit when any command fails
    set -euo pipefail
    echo -e ""
    just --list --unsorted --list-heading $'ðŸŒ± Commands:\n\n'
    echo -e ""
    echo -e "    Github Pages  URL ðŸ”— {{green}}$(cat package.json | jq -r '.repository.url'){{normal}}"
    echo -e "    Develop URL ðŸ”— {{green}}https://{{APP_FQDN}}:{{APP_PORT}}/{{normal}}"
    echo -e ""

# Browser develop. Points to prodction by default, target=local points to the local docker stack
dev target="": _mkcert _ensure_npm_modules (_tsc "--build")
    #!/usr/bin/env bash
    set -eo pipefail

    if [ "${VITE_SERVER_ORIGIN}" = "" ]; then
        export VITE_SERVER_ORIGIN="{{SERVER_ORIGIN}}"
    fi
    if [ "{{target}}" = "local" ]; then
        export VITE_SERVER_ORIGIN="https://{{APP_FQDN}}:{{APP_PORT}}"
    fi
    echo "Browser development pointing to: ${VITE_SERVER_ORIGIN}"
    MAYBE_OPEN_BROWSER=""
    if [ ! -f /.dockerenv ]; then
        export MAYBE_OPEN_BROWSER="--open";
    fi
    npm i
    export HOST={{APP_FQDN}}
    export PORT={{APP_PORT_BROWSER}}
    export CERT_FILE=../ingress/https/.certs/{{APP_FQDN}}.pem
    export CERT_KEY_FILE=../ingress/https/.certs/{{APP_FQDN}}-key.pem
    export BASE=
    echo "vite PORT=${PORT}"
    VITE_SERVER_ORIGIN=${VITE_SERVER_ORIGIN} {{vite}} --clearScreen false ${MAYBE_OPEN_BROWSER}

# Build the browser client static assets (in <root/docs>)
build BASE="": _ensure_npm_modules (_tsc "--build")
    VITE_SERVER_ORIGIN={{SERVER_ORIGIN}} \
    HOST={{APP_FQDN}} \
    OUTDIR=../../docs \
    BASE={{BASE}} \
        deno run --allow-all --unstable {{DENO_SOURCE}}/browser/vite-build.ts --versioning=true

# Test: currently bare minimum: only building. Need proper test harness.
@test: (_tsc "--build")

# Publish to npm and github pages.
publish: _githubpages_publish
    @# Push the tags up
    # git push origin v$(cat package.json | jq -r '.version')

# Deletes: .certs dist
clean:
    rm -rf .certs dist

# Rebuild the client on changes, but do not serve
watch BUILD_SUB_DIR="":
    watchexec -w src -w tsconfig.json -w package.json -w vite.config.ts -- just build

# Watch and serve browser client. Can't use vite to serve: https://github.com/vitejs/vite/issues/2754
serve: _mkcert build
    cd ../../docs && \
    npx http-server --cors '*' -a {{APP_FQDN}} -p {{APP_PORT}} --ssl --cert {{ROOT}}/app/ingress/https/.certs/{{APP_FQDN}}.pem --key {{ROOT}}/app/ingress/https/.certs/{{APP_FQDN}}-key.pem

# compile typescript src, may or may not emit artifacts
_tsc +args="--build": _ensure_npm_modules
    {{tsc}} {{args}}

# DEV: generate TLS certs for HTTPS over localhost https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/
_mkcert:
    deno run --allow-all --unstable {{DENO_SOURCE}}/commands/ensure_mkcert.ts --certs-dir="../ingress/https/certs"

@_ensure_npm_modules:
    if [ ! -f "{{tsc}}" ]; then npm i; fi

# vite builder commands
@_vite +args="":
    {{vite}} {{args}}

# update "gh-pages" branch with the (versioned and default) current build (./docs) (and keeping all previous versions)
_githubpages_publish:
    VITE_SERVER_ORIGIN={{SERVER_ORIGIN}} \
        deno run --unstable --allow-all {{DENO_SOURCE}}/browser/gh-pages-publish-to-docs.ts --versioning=true

@_require_NPM_TOKEN:
	if [ -z "{{NPM_TOKEN}}" ]; then echo "Missing NPM_TOKEN env var"; exit 1; fi
