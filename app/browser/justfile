# just docs: https://github.com/casey/just

set shell := ["bash", "-c"]

# E.g. 'my.app.com'. Some services e.g. auth need know the external endpoint for example OAuth
# The root domain for this app, serving index.html
export APP_FQDN                    := env_var_or_default("APP_FQDN", "docker-run.dev")
export APP_PORT                    := env_var_or_default("APP_PORT", "443")

export PORT_BROWSER                := env_var_or_default("PORT_BROWSER", "8000")
# browser hot-module-replacement (live reloading)
export PORT_HMR                    := env_var_or_default("PORT_HMR", "3456")
# see https://github.com/parcel-bundler/parcel/issues/2031
PARCEL_WORKERS                     := env_var_or_default("PARCEL_WORKERS", `if [ -f /.dockerenv ]; then echo "1" ; fi`)
parcel                             := "PARCEL_WORKERS=" + PARCEL_WORKERS +  " node_modules/parcel-bundler/bin/cli.js"
tsc                                := "./node_modules/typescript/bin/tsc"

# minimal formatting, bold is very useful
bold     := '\033[1m'
normal   := '\033[0m'

@_help:
    just --list --unsorted
    echo -e ""
    echo -e "    ðŸ”—: https://docker-metapage-io.glitch.me"

# Build the client static files
build +args="": (_tsc "--build --verbose")
    rm -rf dist/*
    {{parcel}} build {{args}} public/index.html --no-autoinstall
    @# WTF is this file not copied with parcel-plugin-static-files-copy
    cp public/metaframe.json dist/

# Run the browser dev server (optionally pointing to any remote app)
dev remote="": (_tsc "--build --verbose")
    #!/usr/bin/env bash
    # Running inside docker requires modified startup configuration, HMR is disabled
    if [ -f /.dockerenv ]; then
        echo "ðŸ’¥ Missing feature: parcel (builds browser assets) cannot be run in development mode in a docker container"
        {{parcel}} --cert ../ingress/https/conf.d/certs/${APP_FQDN}.pem \
                   --key  ../ingress/https/conf.d/certs/${APP_FQDN}-key.pem \
                   --port ${PORT_BROWSER} \
                   --host 0.0.0.0 \
                   --hmr-hostname ${APP_FQDN} \
                   --hmr-port ${PORT_HMR} \
                   public/index.html
    else
        APP_ORIGIN=https://${APP_FQDN}:${APP_PORT}
        if [ "{{remote}}" != "" ]; then

            export APP_ORIGIN=https://{{remote}};
            echo "APP_ORIGIN=https://{{remote}}" > .env.local
        fi
        echo "Browser development pointing to: ${APP_ORIGIN}"
        just ../ingress/https/mkcert ignorechecks
        if ! cat /etc/hosts | grep "$APP_FQDN" &> /dev/null; then
            echo -e "";
            echo -e "ðŸ’¥Add to /etc/hosts:ðŸ’¥";
            echo -e "";
            echo -e "      {{bold}}127.0.0.1    ${APP_FQDN}{{normal}}";
            echo -e "";
            exit 1;
        fi
        echo "Browser development pointing to: ${APP_ORIGIN}"
        {{parcel}} --cert ../ingress/https/conf.d/certs/${APP_FQDN}.pem \
                   --key  ../ingress/https/conf.d/certs/${APP_FQDN}-key.pem \
                   --port ${PORT_BROWSER} \
                   --host ${APP_FQDN} \
                   --hmr-hostname ${APP_FQDN} \
                   --hmr-port ${PORT_HMR} \
                   public/index.html --open
    fi

# compile typescript src, may or may not emit artifacts
_tsc +args="":
    {{tsc}} {{args}}

# rebuild the client on changes, but do not serve
watch:
    @# ts-node-dev does not work with typescript project references https://github.com/TypeStrong/ts-node/issues/897
    watchexec --restart --watch ./src --watch ./justfile --watch ./package.json --watch ./tsconfig.json --watch ../shared/tsconfig-base.json --watch ../shared/src -- bash -c '{{tsc}} --build --verbose && {{parcel}} watch --public-url ./ public/index.html'

@_ensure_npm_modules:
    if [ ! -f "{{tsc}}" ]; then npm i; fi
