###############################################################
# Minimal commands to develop, build, test, and deploy
###############################################################
# just docs: https://github.com/casey/just
set shell                          := ["bash", "-c"]
set dotenv-load                    := true
# E.g. 'my.app.com'. Some services e.g. auth need know the external endpoint for example OAuth
# The root domain for this app, serving index.html
export APP_FQDN                    := env_var_or_default("APP_FQDN", "metaframe1.dev")
export APP_PORT                    := env_var_or_default("APP_PORT", "443")
SERVER_ORIGIN                      := env_var_or_default("SERVER_ORIGIN", "https://docker-metapage-io.glitch.me")
export ROOT                        := env_var_or_default("GITHUB_WORKSPACE", `(which git >/dev/null && git rev-parse --show-toplevel) || (cd ../.. && pwd)`)
#`if [ "${GITHUB_WORKSPACE}" != "" ]; then echo "${GITHUB_WORKSPACE}"; else echo "$(git rev-parse --show-toplevel)"; fi`
export CI                          := env_var_or_default("CI", "")
PACKAGE_NAME_SHORT                 := file_name(`cat package.json | jq -r '.name' | sd '.*/' ''`)
DIST_ROOT                          := ROOT + "/docs"
# Store the CI/dev docker image in github
# ghcr.io packages cannot have more than one "/" after the organization name
export DOCKER_IMAGE_PREFIX         := "ghcr.io/metapages/" + PACKAGE_NAME_SHORT
# Always assume our current cloud ops image is versioned to the exact same app images we deploy
export DOCKER_TAG                  := `if [ "${DOCKER_TAG}" != "" ]; then echo "${DOCKER_TAG}"; else if [ "${GITHUB_ACTIONS}" = "true" ]; then echo "${GITHUB_SHA}"; else echo "$(git rev-parse --short=8 HEAD)"; fi; fi`
export DOCKER_IMAGE_NAME           := `basename $(pwd)`
# The NPM_TOKEN is required for publishing to https://www.npmjs.com
NPM_TOKEN                          := env_var_or_default("NPM_TOKEN", "")
# Source of deno scripts. When developing we need to switch this
export DENO_SOURCE                 := env_var_or_default("DENO_SOURCE", "https://deno.land/x/metapages@v0.0.3")
# Common commands that require some preamble
vite                               := "VITE_APP_FQDN=" + APP_FQDN + " VITE_APP_PORT=" + APP_PORT + " NODE_OPTIONS='--max_old_space_size=16384' ./node_modules/vite/bin/vite.js"
tsc                                := "./node_modules/typescript/bin/tsc"
# minimal formatting, bold is very useful
bold                               := '\033[1m'
normal                             := '\033[0m'
green                              := "\\e[32m"
yellow                             := "\\e[33m"
blue                               := "\\e[34m"
magenta                            := "\\e[35m"
grey                               := "\\e[90m"

# If not in docker, get inside
_help:
    #!/usr/bin/env bash
    # exit when any command fails
    set -euo pipefail
    # if [ -f /.dockerenv ]; then
        echo -e ""
        just --list --unsorted --list-heading $'üå± Commands:\n\n'
        echo -e ""
        echo -e "    Github Pages  URL üîó {{green}}$(cat package.json | jq -r '.repository.url'){{normal}}"
        echo -e "    Develop URL üîó {{green}}https://{{APP_FQDN}}:{{APP_PORT}}/{{normal}}"
        echo -e ""
    # else
    #     # Hoist into a docker container with all require CLI tools installed
    #     deno run --unstable --allow-all {{DENO_SOURCE}}/commands/docker/docker_mount.ts --mount-ssh=true --mount-git-config=true  --user=root --image={{DOCKER_IMAGE_PREFIX}}{{DOCKER_IMAGE_NAME}}:{{DOCKER_TAG}} --context="." --dockerfile=Dockerfile --command=bash;
    # fi

# Run the dev server. Opens the web app in browser.
dev: _mkcert _ensure_npm_modules _build_shared (_tsc "--build")
    #!/usr/bin/env bash
    set -eo pipefail

    if [ "${VITE_SERVER_ORIGIN}" = "" ]; then
        export VITE_SERVER_ORIGIN="https://${APP_FQDN}:${APP_PORT}"
    fi
    echo "Browser development pointing to: ${VITE_SERVER_ORIGIN}"
    MAYBE_OPEN_BROWSER=""
    if [ ! -f /.dockerenv ]; then
        export MAYBE_OPEN_BROWSER="--open";
    fi
    VITE_SERVER_ORIGIN=${VITE_SERVER_ORIGIN} {{vite}} --clearScreen false ${MAYBE_OPEN_BROWSER}

# Build the browser client static assets (in <root/docs>)
build BUILD_SUB_DIR="": _ensure_npm_modules _build_shared (_tsc "--build") && _generate_versions_index
    #!/usr/bin/env bash
    set -euo pipefail
    OUTDIR={{DIST_ROOT}}
    if [ "{{BUILD_SUB_DIR}}" != "" ]; then
        OUTDIR=${OUTDIR}/v/{{BUILD_SUB_DIR}}
    fi
    mkdir -p ${OUTDIR}
    rm -rf ${OUTDIR}/public \
           ${OUTDIR}/assets
    find ${OUTDIR} -maxdepth 1 -type f -exec rm "{}" \;

    # rm -rf {{DIST_ROOT}}/{{BUILD_SUB_DIR}}/public \
    #        {{DIST_ROOT}}/{{BUILD_SUB_DIR}}/assets
    # I cannot remember why I need this more complex delete operation
    # I *think* it had something to do with glitch.com deployment
    # Disabling but leaving here in case I hit problems and go looking
    # But remove once glitch deployment is good
    # rm -rf $(echo "docs/{{BUILD_SUB_DIR}}/assets" | sed s#//*#/#g)
    BUILD_SUB_DIR={{BUILD_SUB_DIR}} VITE_SERVER_ORIGIN={{SERVER_ORIGIN}} OUTDIR=${OUTDIR} {{vite}} build --mode=production

# Test: currently bare minimum: only building. Need proper test harness.
@test: (_tsc "--build")

# Publish to npm and github pages.
publish: _githubpages_publish
    @# Push the tags up
    # git push origin v$(cat package.json | jq -r '.version')

# Deletes: .certs dist
clean:
    rm -rf .certs dist

# Rebuild the client on changes, but do not serve
watch BUILD_SUB_DIR="":
    watchexec -w src -w tsconfig.json -w package.json -w vite.config.ts -- just build

# Watch and serve browser client. Can't use vite to serve: https://github.com/vitejs/vite/issues/2754
serve: _mkcert
    DEPLOY_TARGET=glitch just build
    cd dist && \
        {{ROOT}}/app/browser/node_modules/http-server/bin/http-server --cors '*' -a {{APP_FQDN}} -p {{APP_PORT}} --ssl --cert {{ROOT}}/app/ingress/https/.certs/{{APP_FQDN}}.pem --key {{ROOT}}/app/ingress/https/.certs/{{APP_FQDN}}-key.pem

_build_shared:
    just {{ROOT}}/app/shared/build

# compile typescript src, may or may not emit artifacts
_tsc +args="": _ensure_npm_modules
    {{tsc}} {{args}}

# DEV: generate TLS certs for HTTPS over localhost https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/
_mkcert:
    just {{ROOT}}/app/ingress/https/mkcert

@_ensure_npm_modules:
    if [ ! -f "{{tsc}}" ]; then npm i; fi

# vite builder commands
@_vite +args="":
    {{vite}} {{args}}

# update "gh-pages" branch with the (versioned and default) current build (./docs) (and keeping all previous versions)
_githubpages_publish: _ensureGitPorcelain
    #!/usr/bin/env bash
    set -euo pipefail

    # Mostly CURRENT_BRANCH should be main, but maybe you are testing on a different branch
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [ -z "$(git branch --list gh-pages)" ]; then
        git checkout -b gh-pages;
    fi

    git checkout gh-pages

    git rebase --strategy recursive --strategy-option theirs ${CURRENT_BRANCH}

    # Then build
    just build $(cat package.json | jq -r .version)
    just build

    # Now commit and push
    git add --all --force {{ROOT}}/docs
    git commit -m "site v$(cat package.json | jq -r .version)"
    git push -uf origin gh-pages

    # Return to the original branch
    git checkout ${CURRENT_BRANCH}
    echo -e "üëâ Github configuration (once): üîó https://github.com/$(git remote get-url origin | sd 'git@github.com:' '' | sd '.git' '')/settings/pages"
    echo -e "  - {{green}}Source{{normal}}"
    echo -e "    - {{green}}Branch{{normal}}: gh-pages üìÅ /docs"

@_ensureGitPorcelain:
    if [ ! -z "$(git status --untracked-files=no --porcelain)" ]; then \
        echo -e " ‚ùó Uncommitted files:"; \
        git status --untracked-files=no --porcelain; \
        exit 1; \
    fi

@_require_NPM_TOKEN:
	if [ -z "{{NPM_TOKEN}}" ]; then echo "Missing NPM_TOKEN env var"; exit 1; fi

_generate_versions_index:
    #!/usr/bin/env deno run --allow-read={{DIST_ROOT}} --allow-write={{DIST_ROOT}} --unstable
    import {
        ensureDir,
        ensureDirSync,
    } from "https://deno.land/std@0.150.0/fs/mod.ts";
    ensureDirSync("{{DIST_ROOT}}/v");
    let indexHtml = '<!DOCTYPE html><html lang="en"><head><meta charset="utf-8" /><title>versions</title></head><body><ul>';

    for await (const dirEntry of Deno.readDir("{{DIST_ROOT}}/v")) {
        if (dirEntry.isDirectory) {
            indexHtml += `<li><a href="${dirEntry.name}/">${dirEntry.name}</a></li>`;
        }
        console.log(dirEntry);

    }
    indexHtml += `</ul></body></html>`;

    Deno.writeTextFileSync("{{DIST_ROOT}}/v/index.html", indexHtml);
