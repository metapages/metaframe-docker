# Template docker-compose application

version: "2.4"

services:

  server:
    x-publish: true
    image: ${DOCKER_REGISTRY:-}${DOCKER_IMAGE_PREFIX:-}server:${DOCKER_TAG:-cache}
    build:
      context: .
      dockerfile: server/Dockerfile
    environment:
      - "PORT=8080"
      # TODO: localstack? or just suck it up and use an actual bucket?
      - "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
      - "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
      - "AWS_BUCKET=${AWS_AWS_BUCKET}"
    volumes:
      - db:/app/db
    networks:
      - default
    logging:
      driver: ${LOGGING_SERVER:-json-file}

  worker:
    x-publish: true
    image: ${DOCKER_REGISTRY:-}${DOCKER_IMAGE_PREFIX:-}worker:${DOCKER_TAG:-cache}
    build:
      context: .
      dockerfile: worker/Dockerfile
    depends_on:
      server:
        condition: service_healthy
    environment:
      - "PORT=8080"
      - "SERVER_ORIGIN=http://server:8080"
      - "XDG_RUNTIME_DIR=/tmp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # Must match the host path name since used by docker to mount host directories
      - /tmp:/tmp
    networks:
      - default
    logging:
      driver: ${LOGGING_WORKER:-json-file}

  # localstack:
  #   image: localstack/localstack:0.12.8
  #   ports:
  #     - "4566:4566"
  #     - "4571:4571"
  #     - "${PORT_WEB_UI-8084}:${PORT_WEB_UI-8084}"
  #   environment:
  #     - SERVICES=s3
  #     - DEBUG
  #     - DATA_DIR=${DATA_DIR- }
  #     - PORT_WEB_UI=${PORT_WEB_UI- }
  #   volumes:
  #     # (Note that on MacOS you may have to run TMPDIR=/private$TMPDIR docker-compose up if $TMPDIR contains a symbolic link that cannot be mounted by Docker.)
  #     - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
  #   networks:
  #       - default
  #   logging:
  #     driver: ${LOGGING_LOCALSTACK:-json-file}

networks:
  default:
    driver: bridge

volumes:
  db:
