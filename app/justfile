# just docs: https://github.com/casey/just
set shell := ["bash", "-c"]
# Eg "ghcr.io". By default, the ci environment will set this.
# Required for pulling/pushing images, not required for locally building and running.
export DOCKER_REGISTRY             := env_var_or_default("DOCKER_REGISTRY", "")
# Eg "yourname/yourrepo". By default, we'll try to get it whereever it might be available, no value means local development
# This line is duplicated in ci/justfile
export DOCKER_IMAGE_PREFIX         := env_var_or_default("DOCKER_IMAGE_PREFIX", "")
# By default, set by these scripts. Eg <git sha>, v1.2.3, or some other meaningful tag (cache|local)
# For typical operations (outside of debugging), you won't need to set this yourself
# This line is duplicated in ci/justfile
# export DOCKER_TAG               := env_var_or_default("DOCKER_TAG", `(which git >/dev/null && git rev-parse --short HEAD) || echo local`)
export DOCKER_TAG               := env_var_or_default("DOCKER_TAG", "local")
# Required for local https certificates, OAuth config, and the https URL
# Changing APP_FQDN requires the corresponding file in app/vouch/oauth/$APP_FQDN:$APP_PORT.yaml
# TODO: instructions how to set this.
# This line is duplicated in ci/justfile
export APP_FQDN                    := env_var_or_default("APP_FQDN", "docker-run.dev")
# Default to the local development stack, publishing typically is only DOCKER_COMPOSE="docker-compose -f docker-compose.yml"
export DOCKER_COMPOSE              := env_var_or_default("DOCKER_COMPOSE", "docker-compose -f docker-compose.yml -f docker-compose.override.yml")
# App level env vars for ports etc
# Changing APP_PORT requires the corresponding file in app/vouch/oauth/$APP_FQDN:$APP_PORT.yaml
# This line is duplicated in ci/justfile
export APP_PORT                    := env_var_or_default("APP_PORT", "443")
export PORT_BROWSER                := env_var_or_default("PORT_BROWSER", "3000")

# Enforce use of buildkit
export DOCKER_BUILDKIT             := "1"
export COMPOSE_DOCKER_CLI_BUILD    := "1"

# minimal formatting, bold is very useful
bold     := '\033[1m'
normal   := '\033[0m'


# If not in docker, ðŸšª get inside ðŸšª
@_help:
    just --list --unsorted --list-heading $'Commands: (all services)\n'

# ðŸŒ± Build the application stack
@build +args="": _init
    # service 'browser' is consumed by the build step of 'auth', so unfortunately must be built first. If this changes, remove this line
    if [ "{{args}}" = "" ]; then just _build browser-builder; fi
    just _build {{args}}

# ðŸŒ± Test the application stack
@test:
    echo -e "ðŸšª <app/> {{bold}}DOCKER_TAG=$DOCKER_TAG {{DOCKER_COMPOSE}} up -d{{normal}} ðŸšª "
    DOCKER_TAG=$DOCKER_TAG {{DOCKER_COMPOSE}} up -d
    echo -e "ðŸšª <app/> {{bold}}DOCKER_TAG=$DOCKER_TAG {{DOCKER_COMPOSE}} down{{normal}} ðŸšª "
    DOCKER_TAG=$DOCKER_TAG {{DOCKER_COMPOSE}} down
    echo "TODO: stack up->down. No other tests currently so YOU PASS!"

# ðŸŒ± Push application stack docker images to remote registry
publish +images="": build (_push images)

# ðŸŒ± list publishable docker images
@images:
    echo '["server","worker"]'

# build, up, open
dev:
    #!/usr/bin/env bash
    set -e
    just build
    echo "ðŸš€ https://${APP_FQDN}:${APP_PORT}/"
    if [ -f /.dockerenv ]; then
        echo "Cannot open browser from docker. 'exit', then 'just app/_open_url https://${APP_FQDN}:${APP_PORT}/'" ;
        exit;
    fi
    just open
    just up

# 'docker-compose up' to run the stack
@up +args="": _init
    # if [ "{{args}}" = "" ]; then just _dev_build_browser; fi
    {{DOCKER_COMPOSE}} up --remove-orphans {{args}}

# 'docker-compose down'
down +args="":
    {{DOCKER_COMPOSE}} down {{args}}

# Open browser tab pointing to the stack (assumes stack is running)
@open:
    open https://${APP_FQDN}:${APP_PORT}/
    # just _open_url https://${APP_FQDN}:${APP_PORT}/

# Deletes generated files
@clean:
    just ingress/clean
    just browser/clean

# Tail logs for a given service (lazydocker is currently broken)
@logs service="":
    if [ "{{service}}" = "" ]; then echo "Requires a service (ignore *-builder): $(just images)"; exit 0; fi && \
    {{DOCKER_COMPOSE}} logs --tail=1000 -f {{service}}

# docker-compose with bound env vars
dc +args="":
    {{DOCKER_COMPOSE}} {{args}}



###################################################
# Internal utilies
###################################################

# Idempotent. The local compose stack requires some host setup. If any of this fails, see the underlying commands
@_init:
    just ingress/init

# Internal docker-compose build command with env vars documented
@_build +args="":
    echo -e "ðŸšª {{bold}}DOCKER_TAG=$DOCKER_TAG DOCKER_REGISTRY=$DOCKER_REGISTRY DOCKER_IMAGE_PREFIX=$DOCKER_IMAGE_PREFIX {{DOCKER_COMPOSE}} -f docker-compose.cache.yml build --build-arg BUILDKIT_INLINE_CACHE=1 {{args}}{{normal}} ðŸšª " && \
    DOCKER_TAG=$DOCKER_TAG {{DOCKER_COMPOSE}} -f docker-compose.cache.yml build --build-arg BUILDKIT_INLINE_CACHE=1 {{args}}

# Build browser on host but using docker-compose
@_dev_build_browser:
    docker-compose -f browser/docker-compose.browser.yml build
    docker-compose -f browser/docker-compose.browser.yml up

# docker-compose push the images
_push +images="":
    #!/usr/bin/env bash
    set -e
    # This check is here to prevent publishing if there are uncommitted changes, but this check does not work in CI environments
    # because it starts as a clean checkout and git is not installed and it is not a full checkout, just the tip
    #if [[ $(git status --short) != '' ]]; then
    #    git status
    #    exit 2
    #fi
    if [ "{{images}}" = "" ]; then
        echo -e "ðŸšª <app/> {{bold}}DOCKER_TAG={{DOCKER_TAG}} {{DOCKER_COMPOSE}} -f docker-compose.cache.yml push $(just images){{normal}} ðŸšª";
        if [[ -z "${DOCKER_REGISTRY}" ]]; then
            echo "ðŸ”¥ðŸ”¥ðŸ”¥ aborted because DOCKER_REGISTRY is missing. Run 'just ci/publish' (ci sets DOCKER_REGISTRY automatically) or set manually e.g. 'DOCKER_REGISTRY=ghcr.io/' in .env. â€¼ NOTE THE TRAILING SLASH.";
            exit 1;
        fi
        DOCKER_TAG=$DOCKER_TAG {{DOCKER_COMPOSE}} -f docker-compose.cache.yml push $(just images);
    else
        echo -e "ðŸšª <app/> {{bold}}DOCKER_TAG={{DOCKER_TAG}} {{DOCKER_COMPOSE}} -f docker-compose.cache.yml push {{images}}{{normal}} ðŸšª";
        DOCKER_TAG=$DOCKER_TAG {{DOCKER_COMPOSE}} -f docker-compose.cache.yml push {{images}};
    fi

# ðŸŒ± Pull cached docker images (tag is literally "cache")
@_pull +images="":
    echo -e "ðŸšª <app/> {{bold}}DOCKER_REGISTRY=$DOCKER_REGISTRY DOCKER_IMAGE_PREFIX=$DOCKER_IMAGE_PREFIX DOCKER_TAG=cache {{DOCKER_COMPOSE}} -f docker-compose.cache.yml pull --ignore-pull-failures {{images}}{{normal}} ðŸšª"
    if [[ -z "${DOCKER_REGISTRY}" ]]; then \
        echo "docker-compose pull: skipping because DOCKER_REGISTRY is missing. Either 1) just ci/pull, or 2) set e.g. 'DOCKER_REGISTRY=ghcr.io/' in .env. â€¼ NOTE THE TRAILING SLASH"; \
        exit 0; \
    fi
    DOCKER_TAG=cache {{DOCKER_COMPOSE}} -f docker-compose.cache.yml pull --ignore-pull-failures {{images}}

# # deno check
# @_ensureDeno:
#     if ! command -v deno &> /dev/null; then echo 'ðŸ’¥ denoðŸ’¥ is not installed (manual.md#host-requirements): https://deno.land/manual/getting_started/installation'; exit 1; fi

# Do ./app operations in docker with all required tools installed, including local bash history
# Build and run the ci image, used for building, publishing, and deployments
# @_docker +args="bash":
#     just ../ci/_docker {{args}}

# OS independent open URL in browser. If in a docker context, print the URL instead
# _open_url url:
#     deno run --unstable --allow-all {{DENO_SOURCE}}/exec/open_url.ts {{url}}

# these service aliases make commands nicer, but are they needed?
alias graphql := _graphql
_graphql +args="":
    just graphql/{{args}}

alias browser := _browser
@_browser +args="":
    just browser/{{args}}

alias ingress := _ingress
@_ingress +args="":
    just ingress/{{args}}

alias vouch := _vouch
@_vouch +args="":
    just vouch/{{args}}

alias glitch := _glitch
@_glitch +args="":
    just ../ci/glitch/{{args}}
