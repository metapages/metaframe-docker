set shell                := ["bash", "-c"]
export ROOT              := `git rev-parse --show-toplevel`
export GLITCH_BUILD_ROOT := ROOT + "/.tmp/glitch"
GLITCH_GIT_URL           := env_var("GLITCH_GIT_URL")
# minimal formatting
bold                     := '\033[1m'
normal                   := '\033[0m'
green                    := '\033[92m'

@_help:
    just --list --unsorted --list-heading $'Commands: \n'

# Do these steps first!
@playbook:
    echo -e ""
    echo -e "    Build and Deploy one time setup steps (reference: https://support.glitch.com/t/possible-to-code-locally-and-push-to-glitch-with-git/2704/12 )"
    echo -e "    Run these BEFORE attempting to deploy:"
    echo -e "      - ðŸ‘‰ ðŸ”— Go to your glitch app: {{green}}https://glitch.com{{normal}}"
    echo -e "        1) Set up auto-update"
    echo -e "          - ðŸ‘‰ Click: {{green}}Tools{{normal}}"
    echo -e "          - ðŸ‘‰ Click: {{green}}Terminal{{normal}}"
    echo -e "          - ðŸ‘‰ Run these commands (copy paste in the Terminal):"
    echo -e ""
    echo -e "             {{bold}}git config receive.denyCurrentBranch updateInstead{{normal}}"
    echo -e "             {{bold}}echo '/usr/bin/refresh' > .git/hooks/post-receive{{normal}}"
    echo -e "             {{bold}}chmod +x .git/hooks/post-receive{{normal}}"
    echo -e "        2) Get your git URL:"
    echo -e "          - ðŸ‘‰ Click: {{green}}Tools{{normal}}"
    echo -e "          - ðŸ‘‰ Click: {{green}}Import and Export{{normal}}"
    echo -e "          - ðŸ‘‰ Copy: {{green}}Your project's Git URL:{{normal}}"
    echo -e "          - ðŸ‘‰ Paste in the local {{green}}.env{{normal}} file"

# ðŸŒ± deploy to glitch.com. Requires (just playbook). Currently only works on a local host computer (not in CI/cloud, yet)
build:
    #!/usr/bin/env bash
    # Took a hammer to this: create a ./glitch directory and build/copy the app in there
    # Note that '<app/server/> npm run start' will not work outside of this deploy because
    # glitch needs a 'package.json' in the repository root, but our entry point is in <app/server/>
    set -e
    cd $ROOT
    for component in browser server
    do
        just app/$component/build
    done
    mkdir -p $GLITCH_BUILD_ROOT
    rm -rf $GLITCH_BUILD_ROOT/*
    for component in browser server shared
    do
        mkdir -p $GLITCH_BUILD_ROOT/$component
    done
    for component in browser server
    do
        rm -rf $GLITCH_BUILD_ROOT/$component/dist
    done
    rsync -a app/server/node_modules $GLITCH_BUILD_ROOT/
    echo "node_modules" >            $GLITCH_BUILD_ROOT/.gitignore
    for component in browser server shared
    do
        cp -r app/$component/dist              $GLITCH_BUILD_ROOT/$component/
        cp -r app/$component/package.json      $GLITCH_BUILD_ROOT/$component/package.json
        cp -r app/$component/package-lock.json $GLITCH_BUILD_ROOT/$component/package-lock.json
    done
    cp -r app/server/package*    $GLITCH_BUILD_ROOT/

# Builds locally, commits compiled code on a new branch, and pushes glitch branch to your glitch.com app
deploy: _check_git_clean _check_not_on_glitch_branch build _ensure_glitch_remote _glitch_branch_setup _commit_build_to_glitch _deploy

_ensure_glitch_remote:
    git config remote.glitchdotcom.url >&- || git remote add glitchdotcom {{GLITCH_GIT_URL}}

# deploy without any time-consume prerequisites to help debug/fast iterate
_deploy:
    #!/usr/bin/env bash
    cd $ROOT
    CURRENT_BRANCH=$(git branch --show-current)
    git checkout glitch
    git push --verbose --set-upstream glitchdotcom glitch:master
    git checkout $CURRENT_BRANCH

# For testing: build and run the app locally that will run on glitch.com
start: build
    #!/usr/bin/env bash
    set -e
    cd $GLITCH_BUILD_ROOT
    npm i
    npm run start

_commit_build_to_glitch:
    #!/usr/bin/env bash
    cd $ROOT
    CURRENT_BRANCH=$(git branch --show-current)
    git checkout glitch
    cp -r $GLITCH_BUILD_ROOT/* .
    git add browser server shared package*
    git commit -m 'deploy to glitch'
    git checkout $CURRENT_BRANCH

@_check_git_clean:
    if [ "$(git status --porcelain=v1 2>/dev/null)" != "" ]; then \
        echo "Uncommitted changes, deploy will not match local system. Commit, or throw away changes."; \
        exit 1; \
    fi

@_check_not_on_glitch_branch:
    if [ "$(git branch --show-current)" = "glitch" ]; then \
        echo "You cannot deploy from the 'glitch' branch. Suggestion: 'git checkout main'"; \
        exit 1; \
    fi

# sets up the glitch.com app master branch, locally we name it "glitch"
@_glitch_branch_setup:
    #!/usr/bin/env bash
    cd $ROOT
    CURRENT_BRANCH=$(git branch --show-current)
    git branch --delete -D glitch &>/dev/null || true
    git checkout -b glitch --track glitchdotcom/master
    git pull glitchdotcom master:glitch
    touch .gitignore
    if ! grep ".tmp" .gitignore; then
        echo ".tmp" >> .gitignore
    fi
    if ! grep ".data" .gitignore; then
        echo ".data" >> .gitignore
    fi
    if ! grep "/cloud" .gitignore; then
        echo "/cloud" >> .gitignore
    fi
    if ! grep "node_modules" .gitignore; then
        echo "node_modules" >> .gitignore
    fi
    if ! grep ".cache" .gitignore; then
        echo ".cache" >> .gitignore
    fi
    if ! grep "/app" .gitignore; then
        echo "/app" >> .gitignore
    fi
    git add .gitignore
    if [ "$(git status --porcelain=v1 2>/dev/null)" != "" ]; then
        git commit -m ".gitignore"
    fi
    git checkout $CURRENT_BRANCH
